AWSTemplateFormatVersion: 2010-09-09
Description: MusicRating resources

Parameters:
  ParamDomainName:
    Type: String
  ParamBackendVersion:
    Type: String
  ParamDeploymentBucketFrontendDomainName:
    Type: AWS::SSM::Parameter::Value<String>
  ParamDeploymentBucketFrontendName:
    Type: AWS::SSM::Parameter::Value<String>
  ParamEUDomainCertificateArn:
    Type: AWS::SSM::Parameter::Value<String>
  ParamDomainHostedZoneId:
    Type: AWS::SSM::Parameter::Value<String>
  ParamUSDomainCertificateArn:
    Type: String
    Default: arn:aws:acm:us-east-1:025007687265:certificate/ce1411e2-6f5d-4ffb-be8d-878a78cb6adb
  ParamClientId:
    Type: String

Resources:
  # Database
  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: PK
        AttributeType: S
      - AttributeName: SK
        AttributeType: S
      KeySchema:
      - AttributeName: PK
        KeyType: HASH
      - AttributeName: SK
        KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      TableName: MusicRating

  # Backend
  Api:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      DisableExecuteApiEndpoint: TRUE
      Name: MusicRating
      ProtocolType: HTTP
  ApiDomain:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !Sub api.${ParamDomainName}
      DomainNameConfigurations:
      - CertificateArn: !Ref ParamEUDomainCertificateArn
  ApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref Api
      AutoDeploy: true
      StageName: $default
  ApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      ApiId: !Ref Api
      DomainName: !Ref ApiDomain
      Stage: !Ref ApiStage
  ApiBackendAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      ApiId: !Ref Api
      AuthorizerType: JWT
      IdentitySource: [ $request.header.Authorization ]
      JwtConfiguration:
        Audience: [ !Ref ParamClientId ]
        Issuer: https://musicrating.eu.auth0.com
      Name: MusicRatingUsers
  ApiBackendIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref Api
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt [ BackendLambda, Arn ]
      PayloadFormatVersion: '2.0'
  ApiBackendRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref Api
      AuthorizerId: !Ref ApiBackendAuthorizer
      AuthorizationType: JWT
      RouteKey: $default
      Target: !Join [ '/', [ integrations, !Ref ApiBackendIntegration ] ]
  BackendLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - 'sts:AssumeRole'
      ManagedPolicyArns:
      - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - 'dynamodb:DeleteItem'
            - 'dynamodb:GetItem'
            - 'dynamodb:PutItem'
            - 'dynamodb:Query'
            - 'dynamodb:Scan'
            - 'dynamodb:UpdateItem'
            Resource: !GetAtt [ Table, Arn ]
  BackendLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: music-rating-deployment-bucket-backend
        S3Key: backend.zip
        S3ObjectVersion: !Ref ParamBackendVersion
      Handler: bootstrap
      Role: !GetAtt [ BackendLambdaRole, Arn ]
      Runtime: provided.al2
  BackendLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/$default/$default
      FunctionName: !Ref BackendLambda
  ApiARecord:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt [ ApiDomain, RegionalDomainName ]
        HostedZoneId: !GetAtt [ ApiDomain, RegionalHostedZoneId ]
      HostedZoneId: !Ref ParamDomainHostedZoneId
      Name: !Ref ApiDomain
      Type: A

  # Frontend
  CFDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn:
    - CFOriginAccessIdentity
    Properties:
      DistributionConfig:
        Aliases: [!Ref ParamDomainName]
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
          TargetOriginId: MusicRatingOrigin
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        Origins:
        - DomainName: !Ref ParamDeploymentBucketFrontendDomainName
          Id: MusicRatingOrigin
          S3OriginConfig:
            OriginAccessIdentity:  ''
          OriginAccessControlId: !GetAtt [ CFOriginAccessControl, Id ]
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref ParamUSDomainCertificateArn
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
  CFOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: MusicRating-AccessControl
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  CFOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Access to MusicRating frontend src
  DeploymentBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ParamDeploymentBucketFrontendName
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service: cloudfront.amazonaws.com
          Action:
          - 's3:GetObject'
          Resource: !Join [ '', [ 'arn:aws:s3:::', !Ref ParamDeploymentBucketFrontendName, '/*' ] ]
          Condition:
            StringEquals:
              AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CFDistribution}
  FrontendARecord:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt [ CFDistribution, DomainName ]
        HostedZoneId: Z2FDTNDATAQYW2 # Default CloudFront HostedZone
      HostedZoneId: !Ref ParamDomainHostedZoneId
      Name: !Ref ParamDomainName
      Type: A
