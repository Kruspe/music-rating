AWSTemplateFormatVersion: 2010-09-09
Description: MusicRating resources

Parameters:
  ParamDomainName:
    Type: String
  ParamBackendVersion:
    Type: String
  ParamFrontendVersion:
    Type: String
  ParamStaticAssetsBucketDomainName:
    Type: AWS::SSM::Parameter::Value<String>
  ParamStaticAssetsBucketName:
    Type: AWS::SSM::Parameter::Value<String>
  ParamDeploymentBucketName:
    Type: AWS::SSM::Parameter::Value<String>
  ParamEUDomainCertificateArn:
    Type: AWS::SSM::Parameter::Value<String>
  ParamDomainHostedZoneId:
    Type: AWS::SSM::Parameter::Value<String>
  ParamUSDomainCertificateArn:
    Type: String
    Default: arn:aws:acm:us-east-1:025007687265:certificate/ce1411e2-6f5d-4ffb-be8d-878a78cb6adb
  ParamClientId:
    Type: String
  ParamClientSecret:
    Type: String
  ParamSessionSecret:
    Type: String
  ParamFestivalBucketName:
    Type: AWS::SSM::Parameter::Value<String>
  ParamFestivalBucketArn:
    Type: AWS::SSM::Parameter::Value<String>

Resources:
  # Database
  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: PK
        AttributeType: S
      - AttributeName: SK
        AttributeType: S
      KeySchema:
      - AttributeName: PK
        KeyType: HASH
      - AttributeName: SK
        KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      TableName: MusicRating

  # Backend
  BackendApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      DisableExecuteApiEndpoint: TRUE
      Name: MusicRatingBackend
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins:
        - !Sub https://${ParamDomainName}
        - !Sub https://www.${ParamDomainName}
        AllowMethods:
        - '*'
        AllowHeaders:
        - '*'
  BackendApiDomain:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !Sub api.${ParamDomainName}
      DomainNameConfigurations:
      - CertificateArn: !Ref ParamEUDomainCertificateArn
  BackendApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref BackendApi
      AutoDeploy: true
      StageName: $default
  BackendApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      ApiId: !Ref BackendApi
      DomainName: !Ref BackendApiDomain
      Stage: !Ref BackendApiStage
  BackendApiAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      ApiId: !Ref BackendApi
      AuthorizerType: JWT
      IdentitySource: [ $request.header.Authorization ]
      JwtConfiguration:
        Audience: [ !Sub 'https://api.${ParamDomainName}' ]
        Issuer: https://musicrating.eu.auth0.com/
      Name: MusicRatingUsers
  BackendApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref BackendApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt [ BackendLambda, Arn ]
      PayloadFormatVersion: '2.0'
#  BackendApiRoute:
#    Type: AWS::ApiGatewayV2::Route
#    Properties:
#      ApiId: !Ref BackendApi
#      AuthorizerId: !Ref BackendApiAuthorizer
#      AuthorizationType: JWT
#      RouteKey: $default
#      Target: !Join [ '/', [ integrations, !Ref BackendApiIntegration ] ]
  BackendApiRouteGet:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref BackendApi
      AuthorizerId: !Ref BackendApiAuthorizer
      AuthorizationType: JWT
      RouteKey: GET /{proxy+}
      Target: !Join [ '/', [ integrations, !Ref BackendApiIntegration ] ]
  BackendApiRoutePut:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref BackendApi
      AuthorizerId: !Ref BackendApiAuthorizer
      AuthorizationType: JWT
      RouteKey: PUT /{proxy+}
      Target: !Join [ '/', [ integrations, !Ref BackendApiIntegration ] ]
  BackendApiRoutePost:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref BackendApi
      AuthorizerId: !Ref BackendApiAuthorizer
      AuthorizationType: JWT
      RouteKey: POST /{proxy+}
      Target: !Join [ '/', [ integrations, !Ref BackendApiIntegration ] ]
  BackendApiRouteDelete:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref BackendApi
      AuthorizerId: !Ref BackendApiAuthorizer
      AuthorizationType: JWT
      RouteKey: DELETE /{proxy+}
      Target: !Join [ '/', [ integrations, !Ref BackendApiIntegration ] ]
  BackendApiRoutePatch:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref BackendApi
      AuthorizerId: !Ref BackendApiAuthorizer
      AuthorizationType: JWT
      RouteKey: PATCH /{proxy+}
      Target: !Join [ '/', [ integrations, !Ref BackendApiIntegration ] ]
  BackendLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - 'sts:AssumeRole'
      ManagedPolicyArns:
      - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - 'dynamodb:DeleteItem'
            - 'dynamodb:GetItem'
            - 'dynamodb:PutItem'
            - 'dynamodb:Query'
            - 'dynamodb:Scan'
            - 'dynamodb:UpdateItem'
            Resource: !GetAtt [ Table, Arn ]
          - Effect: Allow
            Action:
            - 's3:GetObject'
            Resource: !Sub ${ParamFestivalBucketArn}/*
  BackendLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref ParamDeploymentBucketName
        S3Key: backend.zip
        S3ObjectVersion: !Ref ParamBackendVersion
      Handler: bootstrap
      Role: !GetAtt [ BackendLambdaRole, Arn ]
      Runtime: provided.al2
      Environment:
        Variables:
          LOG_LEVEL: error
          TABLE_NAME: !Ref Table
          FESTIVAL_ARTIST_BUCKET_NAME: !Ref ParamFestivalBucketName
  BackendLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${BackendApi}/$default/*/*
      FunctionName: !Ref BackendLambda
  BackendApiARecord:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt [ BackendApiDomain, RegionalDomainName ]
        HostedZoneId: !GetAtt [ BackendApiDomain, RegionalHostedZoneId ]
      HostedZoneId: !Ref ParamDomainHostedZoneId
      Name: !Ref BackendApiDomain
      Type: A

  # Frontend
  FrontendApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: MusicRatingFrontend
      ProtocolType: HTTP
  FrontendApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref FrontendApi
      AutoDeploy: true
      StageName: $default
  FrontendApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref FrontendApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt [ FrontendLambda, Arn ]
      PayloadFormatVersion: '2.0'
  FrontendApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref FrontendApi
      RouteKey: $default
      Target: !Join [ '/', [ integrations, !Ref FrontendApiIntegration ] ]
  FrontendLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - 'sts:AssumeRole'
      ManagedPolicyArns:
      - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  FrontendLambda:
    Type: AWS::Lambda::Function
    Properties:
      MemorySize: 1024
      Timeout: 5
      Code:
        S3Bucket: !Ref ParamDeploymentBucketName
        S3Key: frontend.zip
        S3ObjectVersion: !Ref ParamFrontendVersion
      Handler: handler.handler
      Role: !GetAtt [ BackendLambdaRole, Arn ]
      Runtime: nodejs20.x
      Environment:
        Variables:
          CLIENT_ID: !Ref ParamClientId
          CLIENT_SECRET: !Ref ParamClientSecret
          SESSION_SECRET: !Ref ParamSessionSecret
          DOMAIN_NAME: !Sub https://${ParamDomainName}
          API_ENDPOINT: !Sub https://api.${ParamDomainName}
  FrontendLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${FrontendApi}/$default/$default
      FunctionName: !Ref FrontendLambda

  CFDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn:
    - CFOriginAccessIdentity
    Properties:
      DistributionConfig:
        Aliases: [!Ref ParamDomainName]
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          - PUT
          - POST
          - PATCH
          - DELETE
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled
          OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac # AllViewerExceptHostHeader
          TargetOriginId: FrontendApiOrigin
          ViewerProtocolPolicy: redirect-to-https
        CacheBehaviors:
        - PathPattern: /static/*
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
          TargetOriginId: StaticAssetsOrigin
          ViewerProtocolPolicy: redirect-to-https
        - PathPattern: /favicon.ico
          AllowedMethods:
          - GET
          - HEAD
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
          TargetOriginId: StaticAssetsOrigin
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: /
        Enabled: true
        Origins:
        - DomainName: !Sub ${FrontendApi.ApiId}.execute-api.${AWS::Region}.amazonaws.com
          Id: FrontendApiOrigin
          CustomOriginConfig:
            OriginProtocolPolicy: https-only
        - DomainName: !Ref ParamStaticAssetsBucketDomainName
          Id: StaticAssetsOrigin
          S3OriginConfig:
            OriginAccessIdentity: ''
          OriginAccessControlId: !GetAtt [ StaticAssetsBucketOriginAccessControl, Id ]
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref ParamUSDomainCertificateArn
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
  StaticAssetsBucketOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: MusicRating-StaticAssets-AccessControl
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  StaticAssetsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ParamStaticAssetsBucketName
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service: cloudfront.amazonaws.com
          Action:
          - 's3:GetObject'
          Resource: !Join [ '', [ 'arn:aws:s3:::', !Ref ParamStaticAssetsBucketName, '/*' ] ]
          Condition:
            ArnEquals:
              AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CFDistribution}
        - Effect: Allow
          Principal:
            Service: cloudfront.amazonaws.com
          Action:
          - 's3:ListBucket'
          Resource: !Sub arn:aws:s3:::${ParamStaticAssetsBucketName}
          Condition:
            ArnEquals:
              AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CFDistribution}
  CFOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: MusicRating-AccessControl
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  CFOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Access to MusicRating frontend src
  FrontendARecord:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt [ CFDistribution, DomainName ]
        HostedZoneId: Z2FDTNDATAQYW2 # Default CloudFront HostedZone
      HostedZoneId: !Ref ParamDomainHostedZoneId
      Name: !Ref ParamDomainName
      Type: A
