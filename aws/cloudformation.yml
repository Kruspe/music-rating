AWSTemplateFormatVersion: 2010-09-09
Description: MusicRating resources

Parameters:
  ParamDomainName:
    Type: String
  ParamBackendVersion:
    Type: String
  ParamDomainHostedZoneId:
    Type: AWS::SSM::Parameter::Value<String>
  ParamEUDomainCertificateArn:
    Type: AWS::SSM::Parameter::Value<String>
  ParamUSDomainCertificateArn:
    Type: String
    Default: arn:aws:acm:us-east-1:025007687265:certificate/c595d43c-8f4d-480f-b2ab-4dab9cc2936f

Resources:
  ExactARecord:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt [ ApiDomain, RegionalDomainName ]
        HostedZoneId: !GetAtt [ ApiDomain, RegionalHostedZoneId ]
      HostedZoneId: !Ref ParamDomainHostedZoneId
      Name: !Ref ParamDomainName
      Type: A

  Api:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      DisableExecuteApiEndpoint: TRUE
      Name: MusicRating
      ProtocolType: HTTP
  ApiDomain:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !Ref ParamDomainName
      DomainNameConfigurations:
      - CertificateArn: !Ref ParamEUDomainCertificateArn
  ApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref Api
      AutoDeploy: true
      StageName: $default
  ApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      ApiId: !Ref Api
      DomainName: !Ref ApiDomain
      Stage: !Ref ApiStage

  ApiBackendIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref Api
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt [ BackendLambda, Arn ]
      PayloadFormatVersion: '2.0'
  ApiBackendRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref Api
      AuthorizerId: !Ref ApiBackendAuthorizer
      AuthorizationType: JWT
      RouteKey: $default
      Target: !Join [ '/', [ integrations, !Ref ApiBackendIntegration ] ]
  ApiBackendAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      ApiId: !Ref Api
      AuthorizerType: JWT
      IdentitySource: [$request.header.Authorization]
      JwtConfiguration:
        Audience: [!Ref UserPoolClient]
        Issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}
      Name: MusicRatingUsers

  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: PK
        AttributeType: S
      - AttributeName: SK
        AttributeType: S
      KeySchema:
      - AttributeName: PK
        KeyType: HASH
      - AttributeName: SK
        KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      TableName: MusicRating

  BackendLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - 'sts:AssumeRole'
      ManagedPolicyArns:
      - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - 'dynamodb:DeleteItem'
            - 'dynamodb:GetItem'
            - 'dynamodb:PutItem'
            - 'dynamodb:Query'
            - 'dynamodb:Scan'
            - 'dynamodb:UpdateItem'
            Resource: !GetAtt [ Table, Arn ]
  BackendLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: music-rating-deployment-bucket
        S3Key: backend.zip
        S3ObjectVersion: !Ref ParamBackendVersion
      Handler: bootstrap
      Role: !GetAtt [ BackendLambdaRole, Arn ]
      Runtime: provided.al2
  BackendLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/$default/$default
      FunctionName: !Ref BackendLambda

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
        - Name: verified_email
          Priority: 1
      AliasAttributes:
      - email
      AutoVerifiedAttributes:
      - email
      Schema:
      - AttributeDataType: String
        Mutable: true
        Name: email
        Required: true
      UserPoolName: MusicRating
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AllowedOAuthFlows:
      - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes: [openid]
      CallbackURLs: [https://musicrating.rocks/]
      GenerateSecret: TRUE
      PreventUserExistenceErrors: ENABLED
      SupportedIdentityProviders:
      - COGNITO
      UserPoolId: !Ref UserPool
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    DependsOn: [ExactARecord]
    Properties:
      CustomDomainConfig:
        CertificateArn: !Ref ParamUSDomainCertificateArn
      Domain: !Sub auth.${ParamDomainName}
      UserPoolId: !Ref UserPool



